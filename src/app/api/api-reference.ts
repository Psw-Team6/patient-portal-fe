//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IApplicationUserClient {
  authenticate(loginRequest: LoginRequest): Observable<LoginResponse>;
  getAllApplicationUsers(): Observable<ApplicationUser[]>;
}

@Injectable()
export class ApplicationUserClient implements IApplicationUserClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  authenticate(loginRequest: LoginRequest): Observable<LoginResponse> {
    let url_ = this.baseUrl + "/api/v1/ApplicationUser/Authenticate";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loginRequest);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processAuthenticate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAuthenticate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<LoginResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<LoginResponse>;
    }));
  }

  protected processAuthenticate(response: HttpResponseBase): Observable<LoginResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = LoginResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getAllApplicationUsers(): Observable<ApplicationUser[]> {
    let url_ = this.baseUrl + "/api/v1/ApplicationUser";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAllApplicationUsers(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllApplicationUsers(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<ApplicationUser[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<ApplicationUser[]>;
    }));
  }

  protected processGetAllApplicationUsers(response: HttpResponseBase): Observable<ApplicationUser[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(ApplicationUser.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IAppointmentClient {
  getAllAppointments(): Observable<AppointmentResponse[]>;
  getById(id: string): Observable<AppointmentResponse>;
  cancelAppointment(id: string): Observable<void>;
  getDoctorAppointments(id: string): Observable<AppointmentResponse[]>;
}

@Injectable()
export class AppointmentClient implements IAppointmentClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  getAllAppointments(): Observable<AppointmentResponse[]> {
    let url_ = this.baseUrl + "/api/v1/Appointment";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAllAppointments(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllAppointments(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<AppointmentResponse[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<AppointmentResponse[]>;
    }));
  }

  protected processGetAllAppointments(response: HttpResponseBase): Observable<AppointmentResponse[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(AppointmentResponse.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getById(id: string): Observable<AppointmentResponse> {
    let url_ = this.baseUrl + "/api/v1/Appointment/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<AppointmentResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<AppointmentResponse>;
    }));
  }

  protected processGetById(response: HttpResponseBase): Observable<AppointmentResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AppointmentResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  cancelAppointment(id: string): Observable<void> {
    let url_ = this.baseUrl + "/api/v1/Appointment/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCancelAppointment(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCancelAppointment(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processCancelAppointment(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getDoctorAppointments(id: string): Observable<AppointmentResponse[]> {
    let url_ = this.baseUrl + "/api/v1/Appointment/GetDoctorAppointments/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetDoctorAppointments(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetDoctorAppointments(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<AppointmentResponse[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<AppointmentResponse[]>;
    }));
  }

  protected processGetDoctorAppointments(response: HttpResponseBase): Observable<AppointmentResponse[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(AppointmentResponse.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IBloodConsumptionClient {
  getAllConsumptions(): Observable<BloodConsumption[]>;
  getByBloodBankNameGET(bloodBankName: string | null): Observable<BloodConsumption[]>;
  getByBloodBankNameGET2(doctorId: string): Observable<BloodConsumption[]>;
  getByBloodBankNamePOST(doctorId: string, request: BloodConsumationRequest): Observable<BloodConsumption[]>;
}

@Injectable()
export class BloodConsumptionClient implements IBloodConsumptionClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  getAllConsumptions(): Observable<BloodConsumption[]> {
    let url_ = this.baseUrl + "/api/v1/BloodConsumption";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAllConsumptions(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllConsumptions(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<BloodConsumption[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<BloodConsumption[]>;
    }));
  }

  protected processGetAllConsumptions(response: HttpResponseBase): Observable<BloodConsumption[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(BloodConsumption.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getByBloodBankNameGET(bloodBankName: string | null): Observable<BloodConsumption[]> {
    let url_ = this.baseUrl + "/api/v1/BloodConsumption/getBankConsumptions/{bloodBankName}";
    if (bloodBankName === undefined || bloodBankName === null)
      throw new Error("The parameter 'bloodBankName' must be defined.");
    url_ = url_.replace("{bloodBankName}", encodeURIComponent("" + bloodBankName));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetByBloodBankNameGET(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetByBloodBankNameGET(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<BloodConsumption[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<BloodConsumption[]>;
    }));
  }

  protected processGetByBloodBankNameGET(response: HttpResponseBase): Observable<BloodConsumption[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(BloodConsumption.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getByBloodBankNameGET2(doctorId: string): Observable<BloodConsumption[]> {
    let url_ = this.baseUrl + "/api/v1/BloodConsumption/getDoctorConsumptions/{doctorId}";
    if (doctorId === undefined || doctorId === null)
      throw new Error("The parameter 'doctorId' must be defined.");
    url_ = url_.replace("{doctorId}", encodeURIComponent("" + doctorId));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetByBloodBankNameGET2(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetByBloodBankNameGET2(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<BloodConsumption[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<BloodConsumption[]>;
    }));
  }

  protected processGetByBloodBankNameGET2(response: HttpResponseBase): Observable<BloodConsumption[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(BloodConsumption.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getByBloodBankNamePOST(doctorId: string, request: BloodConsumationRequest): Observable<BloodConsumption[]> {
    let url_ = this.baseUrl + "/api/v1/BloodConsumption/{doctorId}";
    if (doctorId === undefined || doctorId === null)
      throw new Error("The parameter 'doctorId' must be defined.");
    url_ = url_.replace("{doctorId}", encodeURIComponent("" + doctorId));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(request);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetByBloodBankNamePOST(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetByBloodBankNamePOST(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<BloodConsumption[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<BloodConsumption[]>;
    }));
  }

  protected processGetByBloodBankNamePOST(response: HttpResponseBase): Observable<BloodConsumption[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData201)) {
          result201 = [] as any;
          for (let item of resultData201)
            result201!.push(BloodConsumption.fromJS(item));
        }
        else {
          result201 = <any>null;
        }
        return _observableOf(result201);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IBloodUnitClient {
  getUnits(): Observable<BloodUnitDto[]>;
  getAllBloodUnits(): Observable<BloodUnit[]>;
  getAvailableBloodUnit(request: AvailableBloodUnitRequest): Observable<BloodUnit>;
}

@Injectable()
export class BloodUnitClient implements IBloodUnitClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  getUnits(): Observable<BloodUnitDto[]> {
    let url_ = this.baseUrl + "/api/v1/BloodUnit";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetUnits(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetUnits(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<BloodUnitDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<BloodUnitDto[]>;
    }));
  }

  protected processGetUnits(response: HttpResponseBase): Observable<BloodUnitDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(BloodUnitDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getAllBloodUnits(): Observable<BloodUnit[]> {
    let url_ = this.baseUrl + "/api/v1/BloodUnit/GetAllBloodUnits";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAllBloodUnits(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllBloodUnits(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<BloodUnit[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<BloodUnit[]>;
    }));
  }

  protected processGetAllBloodUnits(response: HttpResponseBase): Observable<BloodUnit[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(BloodUnit.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getAvailableBloodUnit(request: AvailableBloodUnitRequest): Observable<BloodUnit> {
    let url_ = this.baseUrl + "/api/v1/BloodUnit/getAvailableBloodUnit";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(request);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAvailableBloodUnit(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAvailableBloodUnit(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<BloodUnit>;
        }
      } else
        return _observableThrow(response_) as any as Observable<BloodUnit>;
    }));
  }

  protected processGetAvailableBloodUnit(response: HttpResponseBase): Observable<BloodUnit> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = BloodUnit.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IBuildingClient {
  getAllBuildings(): Observable<BuildingResponse[]>;
  update(buildingDto: BuildingRequest): Observable<void>;
  getById(id: string): Observable<RoomResponse>;
}

@Injectable()
export class BuildingClient implements IBuildingClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  getAllBuildings(): Observable<BuildingResponse[]> {
    let url_ = this.baseUrl + "/api/v1/Building";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAllBuildings(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllBuildings(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<BuildingResponse[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<BuildingResponse[]>;
    }));
  }

  protected processGetAllBuildings(response: HttpResponseBase): Observable<BuildingResponse[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(BuildingResponse.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  update(buildingDto: BuildingRequest): Observable<void> {
    let url_ = this.baseUrl + "/api/v1/Building";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(buildingDto);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processUpdate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdate(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getById(id: string): Observable<RoomResponse> {
    let url_ = this.baseUrl + "/api/v1/Building/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<RoomResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<RoomResponse>;
    }));
  }

  protected processGetById(response: HttpResponseBase): Observable<RoomResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RoomResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IDoctorClient {
  getAllDoctors(): Observable<DoctorResponse[]>;
  createDoctor(doctorRequest: DoctorRequest): Observable<DoctorResponse>;
  deleteById(id: string | undefined): Observable<void>;
  getByUsername(username: string | null): Observable<DoctorResponse>;
  getById(id: string): Observable<DoctorResponse>;
}

@Injectable()
export class DoctorClient implements IDoctorClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  getAllDoctors(): Observable<DoctorResponse[]> {
    let url_ = this.baseUrl + "/api/v1/Doctor";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAllDoctors(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllDoctors(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<DoctorResponse[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<DoctorResponse[]>;
    }));
  }

  protected processGetAllDoctors(response: HttpResponseBase): Observable<DoctorResponse[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(DoctorResponse.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  createDoctor(doctorRequest: DoctorRequest): Observable<DoctorResponse> {
    let url_ = this.baseUrl + "/api/v1/Doctor";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(doctorRequest);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCreateDoctor(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreateDoctor(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<DoctorResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<DoctorResponse>;
    }));
  }

  protected processCreateDoctor(response: HttpResponseBase): Observable<DoctorResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = DoctorResponse.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  deleteById(id: string | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/v1/Doctor?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processDeleteById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeleteById(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getByUsername(username: string | null): Observable<DoctorResponse> {
    let url_ = this.baseUrl + "/api/v1/Doctor/username/{username}";
    if (username === undefined || username === null)
      throw new Error("The parameter 'username' must be defined.");
    url_ = url_.replace("{username}", encodeURIComponent("" + username));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetByUsername(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetByUsername(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<DoctorResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<DoctorResponse>;
    }));
  }

  protected processGetByUsername(response: HttpResponseBase): Observable<DoctorResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DoctorResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getById(id: string): Observable<DoctorResponse> {
    let url_ = this.baseUrl + "/api/v1/Doctor/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<DoctorResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<DoctorResponse>;
    }));
  }

  protected processGetById(response: HttpResponseBase): Observable<DoctorResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DoctorResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IFeedbackClient {
  getAll(): Observable<FeedbackResponse[]>;
  createFeedback(feedbackRequest: FeedbackRequest): Observable<FeedbackResponse>;
  updateFeedbackStatus(feedbackStatusResponse: FeedbackStatusResponse): Observable<void>;
  getAllPublic(): Observable<FeedbackResponse[]>;
  getById(id: string): Observable<FeedbackResponse>;
}

@Injectable()
export class FeedbackClient implements IFeedbackClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  getAll(): Observable<FeedbackResponse[]> {
    let url_ = this.baseUrl + "/api/v1/Feedback";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAll(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAll(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<FeedbackResponse[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<FeedbackResponse[]>;
    }));
  }

  protected processGetAll(response: HttpResponseBase): Observable<FeedbackResponse[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(FeedbackResponse.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  createFeedback(feedbackRequest: FeedbackRequest): Observable<FeedbackResponse> {
    let url_ = this.baseUrl + "/api/v1/Feedback";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(feedbackRequest);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCreateFeedback(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreateFeedback(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<FeedbackResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<FeedbackResponse>;
    }));
  }

  protected processCreateFeedback(response: HttpResponseBase): Observable<FeedbackResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = FeedbackResponse.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  updateFeedbackStatus(feedbackStatusResponse: FeedbackStatusResponse): Observable<void> {
    let url_ = this.baseUrl + "/api/v1/Feedback";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(feedbackStatusResponse);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processUpdateFeedbackStatus(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateFeedbackStatus(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdateFeedbackStatus(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getAllPublic(): Observable<FeedbackResponse[]> {
    let url_ = this.baseUrl + "/api/v1/Feedback-public";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAllPublic(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllPublic(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<FeedbackResponse[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<FeedbackResponse[]>;
    }));
  }

  protected processGetAllPublic(response: HttpResponseBase): Observable<FeedbackResponse[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(FeedbackResponse.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getById(id: string): Observable<FeedbackResponse> {
    let url_ = this.baseUrl + "/api/v1/Feedback/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<FeedbackResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<FeedbackResponse>;
    }));
  }

  protected processGetById(response: HttpResponseBase): Observable<FeedbackResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = FeedbackResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IFloorClient {
  getAllFloors(): Observable<FloorResponse[]>;
  update(floorDto: FloorRequest): Observable<void>;
}

@Injectable()
export class FloorClient implements IFloorClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  getAllFloors(): Observable<FloorResponse[]> {
    let url_ = this.baseUrl + "/api/v1/Floor";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAllFloors(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllFloors(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<FloorResponse[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<FloorResponse[]>;
    }));
  }

  protected processGetAllFloors(response: HttpResponseBase): Observable<FloorResponse[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(FloorResponse.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  update(floorDto: FloorRequest): Observable<void> {
    let url_ = this.baseUrl + "/api/v1/Floor";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(floorDto);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processUpdate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdate(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IGRoomsClient {
  getAll(): Observable<GRoom[]>;
}

@Injectable()
export class GRoomsClient implements IGRoomsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  getAll(): Observable<GRoom[]> {
    let url_ = this.baseUrl + "/api/v1/GRooms";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAll(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAll(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GRoom[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GRoom[]>;
    }));
  }

  protected processGetAll(response: HttpResponseBase): Observable<GRoom[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(GRoom.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IPatientClient {
  getAllPatients(): Observable<PatientResponse[]>;
  createPatient(patientRequest: PatientRequest): Observable<PatientResponse>;
  getById(id: string): Observable<PatientResponse>;
}

@Injectable()
export class PatientClient implements IPatientClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  getAllPatients(): Observable<PatientResponse[]> {
    let url_ = this.baseUrl + "/api/v1/Patient";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAllPatients(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllPatients(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<PatientResponse[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<PatientResponse[]>;
    }));
  }

  protected processGetAllPatients(response: HttpResponseBase): Observable<PatientResponse[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(PatientResponse.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  createPatient(patientRequest: PatientRequest): Observable<PatientResponse> {
    let url_ = this.baseUrl + "/api/v1/Patient";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(patientRequest);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCreatePatient(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreatePatient(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<PatientResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<PatientResponse>;
    }));
  }

  protected processCreatePatient(response: HttpResponseBase): Observable<PatientResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = PatientResponse.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getById(id: string): Observable<PatientResponse> {
    let url_ = this.baseUrl + "/api/v1/Patient/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<PatientResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<PatientResponse>;
    }));
  }

  protected processGetById(response: HttpResponseBase): Observable<PatientResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PatientResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IRoomsClient {
  getAll(): Observable<RoomResponse[]>;
  update(roomDto: RoomRequest): Observable<void>;
  getAllByBuildingAndFloor(buildingId: string, floorId: string): Observable<RoomResponse[]>;
  getById(id: string): Observable<RoomResponse>;
}

@Injectable()
export class RoomsClient implements IRoomsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  getAll(): Observable<RoomResponse[]> {
    let url_ = this.baseUrl + "/api/Rooms";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAll(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAll(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<RoomResponse[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<RoomResponse[]>;
    }));
  }

  protected processGetAll(response: HttpResponseBase): Observable<RoomResponse[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(RoomResponse.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  update(roomDto: RoomRequest): Observable<void> {
    let url_ = this.baseUrl + "/api/Rooms";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(roomDto);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processUpdate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdate(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getAllByBuildingAndFloor(buildingId: string, floorId: string): Observable<RoomResponse[]> {
    let url_ = this.baseUrl + "/api/Rooms/{buildingId}/{floorId}";
    if (buildingId === undefined || buildingId === null)
      throw new Error("The parameter 'buildingId' must be defined.");
    url_ = url_.replace("{buildingId}", encodeURIComponent("" + buildingId));
    if (floorId === undefined || floorId === null)
      throw new Error("The parameter 'floorId' must be defined.");
    url_ = url_.replace("{floorId}", encodeURIComponent("" + floorId));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAllByBuildingAndFloor(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllByBuildingAndFloor(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<RoomResponse[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<RoomResponse[]>;
    }));
  }

  protected processGetAllByBuildingAndFloor(response: HttpResponseBase): Observable<RoomResponse[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(RoomResponse.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getById(id: string): Observable<RoomResponse> {
    let url_ = this.baseUrl + "/api/Rooms/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<RoomResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<RoomResponse>;
    }));
  }

  protected processGetById(response: HttpResponseBase): Observable<RoomResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RoomResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface ISpecializationsClient {
  create(specializationDto: SpecializationRequest): Observable<SpecializationResponse>;
  update(specializationDto: SpecializationRequest): Observable<void>;
  getById(id: string): Observable<PatientResponse>;
  getByName(name: string | null): Observable<SpecializationResponse>;
}

@Injectable()
export class SpecializationsClient implements ISpecializationsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  create(specializationDto: SpecializationRequest): Observable<SpecializationResponse> {
    let url_ = this.baseUrl + "/api/v1/Specializations";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(specializationDto);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCreate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SpecializationResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SpecializationResponse>;
    }));
  }

  protected processCreate(response: HttpResponseBase): Observable<SpecializationResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = SpecializationResponse.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  update(specializationDto: SpecializationRequest): Observable<void> {
    let url_ = this.baseUrl + "/api/v1/Specializations";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(specializationDto);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processUpdate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdate(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getById(id: string): Observable<PatientResponse> {
    let url_ = this.baseUrl + "/api/v1/Specializations/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<PatientResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<PatientResponse>;
    }));
  }

  protected processGetById(response: HttpResponseBase): Observable<PatientResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PatientResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  getByName(name: string | null): Observable<SpecializationResponse> {
    let url_ = this.baseUrl + "/getByName/{name}";
    if (name === undefined || name === null)
      throw new Error("The parameter 'name' must be defined.");
    url_ = url_.replace("{name}", encodeURIComponent("" + name));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetByName(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetByName(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SpecializationResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SpecializationResponse>;
    }));
  }

  protected processGetByName(response: HttpResponseBase): Observable<SpecializationResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SpecializationResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IHolidayClient {
  getAllHolidays(): Observable<Holiday[]>;
  scheduleHoliday(holiday: Holiday): Observable<void>;
}

@Injectable()
export class HolidayClient implements IHolidayClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  getAllHolidays(): Observable<Holiday[]> {
    let url_ = this.baseUrl + "/api/v1/Holiday";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetAllHolidays(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllHolidays(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<Holiday[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<Holiday[]>;
    }));
  }

  protected processGetAllHolidays(response: HttpResponseBase): Observable<Holiday[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(Holiday.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  scheduleHoliday(holiday: Holiday): Observable<void> {
    let url_ = this.baseUrl + "/api/v1/Holiday";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(holiday);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processScheduleHoliday(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processScheduleHoliday(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processScheduleHoliday(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export interface IScheduleClient {
  scheduleAppointment(appointmentRequest: AppointmentRequest): Observable<AppointmentResponse>;
  rescheduleAppointment(appointmentRequest: AppointmentResponse): Observable<void>;
}

@Injectable()
export class ScheduleClient implements IScheduleClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
  }

  scheduleAppointment(appointmentRequest: AppointmentRequest): Observable<AppointmentResponse> {
    let url_ = this.baseUrl + "/api/v1/Schedule";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(appointmentRequest);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processScheduleAppointment(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processScheduleAppointment(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<AppointmentResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<AppointmentResponse>;
    }));
  }

  protected processScheduleAppointment(response: HttpResponseBase): Observable<AppointmentResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = AppointmentResponse.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  rescheduleAppointment(appointmentRequest: AppointmentResponse): Observable<void> {
    let url_ = this.baseUrl + "/api/v1/Schedule";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(appointmentRequest);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processRescheduleAppointment(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processRescheduleAppointment(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processRescheduleAppointment(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("A server side error occurred.", status, _responseText, _headers, result400);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class LoginResponse implements ILoginResponse {
  message?: string | undefined;
  token?: string | undefined;
  userToken?: UserToken | undefined;

  constructor(data?: ILoginResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data["message"];
      this.token = _data["token"];
      this.userToken = _data["userToken"] ? UserToken.fromJS(_data["userToken"]) : <any>undefined;
    }
  }

  static fromJS(data: any): LoginResponse {
    data = typeof data === 'object' ? data : {};
    let result = new LoginResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["message"] = this.message;
    data["token"] = this.token;
    data["userToken"] = this.userToken ? this.userToken.toJSON() : <any>undefined;
    return data;
  }
}

export interface ILoginResponse {
  message?: string | undefined;
  token?: string | undefined;
  userToken?: UserToken | undefined;
}

export class UserToken implements IUserToken {
  id?: string;
  email?: string | undefined;
  role?: string | undefined;
  username?: string | undefined;
  name?: string | undefined;
  surname?: string | undefined;

  constructor(data?: IUserToken) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.email = _data["email"];
      this.role = _data["role"];
      this.username = _data["username"];
      this.name = _data["name"];
      this.surname = _data["surname"];
    }
  }

  static fromJS(data: any): UserToken {
    data = typeof data === 'object' ? data : {};
    let result = new UserToken();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["email"] = this.email;
    data["role"] = this.role;
    data["username"] = this.username;
    data["name"] = this.name;
    data["surname"] = this.surname;
    return data;
  }
}

export interface IUserToken {
  id?: string;
  email?: string | undefined;
  role?: string | undefined;
  username?: string | undefined;
  name?: string | undefined;
  surname?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  extensions?: { [key: string]: any; } | undefined;

  [key: string]: any;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property))
          this[property] = _data[property];
      }
      this.type = _data["type"];
      this.title = _data["title"];
      this.status = _data["status"];
      this.detail = _data["detail"];
      this.instance = _data["instance"];
      if (_data["extensions"]) {
        this.extensions = {} as any;
        for (let key in _data["extensions"]) {
          if (_data["extensions"].hasOwnProperty(key))
            (<any>this.extensions)![key] = _data["extensions"][key];
        }
      }
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === 'object' ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property))
        data[property] = this[property];
    }
    data["type"] = this.type;
    data["title"] = this.title;
    data["status"] = this.status;
    data["detail"] = this.detail;
    data["instance"] = this.instance;
    if (this.extensions) {
      data["extensions"] = {};
      for (let key in this.extensions) {
        if (this.extensions.hasOwnProperty(key))
          (<any>data["extensions"])[key] = (<any>this.extensions)[key];
      }
    }
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  extensions?: { [key: string]: any; } | undefined;

  [key: string]: any;
}

export class LoginRequest implements ILoginRequest {
  username?: string | undefined;
  password?: string | undefined;
  portalUrl?: string | undefined;

  constructor(data?: ILoginRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"];
      this.password = _data["password"];
      this.portalUrl = _data["portalUrl"];
    }
  }

  static fromJS(data: any): LoginRequest {
    data = typeof data === 'object' ? data : {};
    let result = new LoginRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["username"] = this.username;
    data["password"] = this.password;
    data["portalUrl"] = this.portalUrl;
    return data;
  }
}

export interface ILoginRequest {
  username?: string | undefined;
  password?: string | undefined;
  portalUrl?: string | undefined;
}

export class ApplicationUser implements IApplicationUser {
  id?: string;
  username?: string | undefined;
  password?: string | undefined;
  addressId?: string;
  address?: Address | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  email?: string | undefined;
  jmbg?: string | undefined;
  phone?: string | undefined;
  userRole?: UserRole;

  constructor(data?: IApplicationUser) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.username = _data["username"];
      this.password = _data["password"];
      this.addressId = _data["addressId"];
      this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
      this.name = _data["name"];
      this.surname = _data["surname"];
      this.email = _data["email"];
      this.jmbg = _data["jmbg"];
      this.phone = _data["phone"];
      this.userRole = _data["userRole"];
    }
  }

  static fromJS(data: any): ApplicationUser {
    data = typeof data === 'object' ? data : {};
    let result = new ApplicationUser();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["username"] = this.username;
    data["password"] = this.password;
    data["addressId"] = this.addressId;
    data["address"] = this.address ? this.address.toJSON() : <any>undefined;
    data["name"] = this.name;
    data["surname"] = this.surname;
    data["email"] = this.email;
    data["jmbg"] = this.jmbg;
    data["phone"] = this.phone;
    data["userRole"] = this.userRole;
    return data;
  }
}

export interface IApplicationUser {
  id?: string;
  username?: string | undefined;
  password?: string | undefined;
  addressId?: string;
  address?: Address | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  email?: string | undefined;
  jmbg?: string | undefined;
  phone?: string | undefined;
  userRole?: UserRole;
}

export class Address implements IAddress {
  id?: string;
  city?: string | undefined;
  streetNumber?: string | undefined;
  country?: string | undefined;
  street?: string | undefined;
  postcode?: number;

  constructor(data?: IAddress) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.city = _data["city"];
      this.streetNumber = _data["streetNumber"];
      this.country = _data["country"];
      this.street = _data["street"];
      this.postcode = _data["postcode"];
    }
  }

  static fromJS(data: any): Address {
    data = typeof data === 'object' ? data : {};
    let result = new Address();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["city"] = this.city;
    data["streetNumber"] = this.streetNumber;
    data["country"] = this.country;
    data["street"] = this.street;
    data["postcode"] = this.postcode;
    return data;
  }
}

export interface IAddress {
  id?: string;
  city?: string | undefined;
  streetNumber?: string | undefined;
  country?: string | undefined;
  street?: string | undefined;
  postcode?: number;
}

export enum UserRole {
  Doctor = 0,
  Manager = 1,
  Patient = 2,
}

export class AppointmentResponse implements IAppointmentResponse {
  id?: string;
  emergent?: boolean;
  duration?: DateRange | undefined;
  patientId?: string;
  patient?: PatientResponse | undefined;
  appointmentType?: AppointmentType;
  doctorId?: string;
  appointmentState?: AppointmentState;

  constructor(data?: IAppointmentResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.emergent = _data["emergent"];
      this.duration = _data["duration"] ? DateRange.fromJS(_data["duration"]) : <any>undefined;
      this.patientId = _data["patientId"];
      this.patient = _data["patient"] ? PatientResponse.fromJS(_data["patient"]) : <any>undefined;
      this.appointmentType = _data["appointmentType"];
      this.doctorId = _data["doctorId"];
      this.appointmentState = _data["appointmentState"];
    }
  }

  static fromJS(data: any): AppointmentResponse {
    data = typeof data === 'object' ? data : {};
    let result = new AppointmentResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["emergent"] = this.emergent;
    data["duration"] = this.duration ? this.duration.toJSON() : <any>undefined;
    data["patientId"] = this.patientId;
    data["patient"] = this.patient ? this.patient.toJSON() : <any>undefined;
    data["appointmentType"] = this.appointmentType;
    data["doctorId"] = this.doctorId;
    data["appointmentState"] = this.appointmentState;
    return data;
  }
}

export interface IAppointmentResponse {
  id?: string;
  emergent?: boolean;
  duration?: DateRange | undefined;
  patientId?: string;
  patient?: PatientResponse | undefined;
  appointmentType?: AppointmentType;
  doctorId?: string;
  appointmentState?: AppointmentState;
}

export class DateRange implements IDateRange {
  from?: Date;
  to?: Date;

  constructor(data?: IDateRange) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.from = _data["from"] ? new Date(_data["from"].toString()) : <any>undefined;
      this.to = _data["to"] ? new Date(_data["to"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): DateRange {
    data = typeof data === 'object' ? data : {};
    let result = new DateRange();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["from"] = this.from ? this.from.toISOString() : <any>undefined;
    data["to"] = this.to ? this.to.toISOString() : <any>undefined;
    return data;
  }
}

export interface IDateRange {
  from?: Date;
  to?: Date;
}

export class PatientResponse implements IPatientResponse {
  id?: string;
  username?: string | undefined;
  password?: string | undefined;
  address?: Address | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  email?: string | undefined;
  jmbg?: string | undefined;
  phone?: string | undefined;

  constructor(data?: IPatientResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.username = _data["username"];
      this.password = _data["password"];
      this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
      this.name = _data["name"];
      this.surname = _data["surname"];
      this.email = _data["email"];
      this.jmbg = _data["jmbg"];
      this.phone = _data["phone"];
    }
  }

  static fromJS(data: any): PatientResponse {
    data = typeof data === 'object' ? data : {};
    let result = new PatientResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["username"] = this.username;
    data["password"] = this.password;
    data["address"] = this.address ? this.address.toJSON() : <any>undefined;
    data["name"] = this.name;
    data["surname"] = this.surname;
    data["email"] = this.email;
    data["jmbg"] = this.jmbg;
    data["phone"] = this.phone;
    return data;
  }
}

export interface IPatientResponse {
  id?: string;
  username?: string | undefined;
  password?: string | undefined;
  address?: Address | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  email?: string | undefined;
  jmbg?: string | undefined;
  phone?: string | undefined;
}

export enum AppointmentType {
  Examination = 0,
  Operation = 1,
}

export enum AppointmentState {
  Pending = 0,
  Finished = 1,
  Cancelled = 2,
}

export class BloodConsumption implements IBloodConsumption {
  id?: string;
  bloodUnitId?: string;
  bloodUnit?: BloodUnit | undefined;
  amount?: number;
  doctorId?: string;
  date?: Date;
  purpose?: string | undefined;

  constructor(data?: IBloodConsumption) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.bloodUnitId = _data["bloodUnitId"];
      this.bloodUnit = _data["bloodUnit"] ? BloodUnit.fromJS(_data["bloodUnit"]) : <any>undefined;
      this.amount = _data["amount"];
      this.doctorId = _data["doctorId"];
      this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
      this.purpose = _data["purpose"];
    }
  }

  static fromJS(data: any): BloodConsumption {
    data = typeof data === 'object' ? data : {};
    let result = new BloodConsumption();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["bloodUnitId"] = this.bloodUnitId;
    data["bloodUnit"] = this.bloodUnit ? this.bloodUnit.toJSON() : <any>undefined;
    data["amount"] = this.amount;
    data["doctorId"] = this.doctorId;
    data["date"] = this.date ? this.date.toISOString() : <any>undefined;
    data["purpose"] = this.purpose;
    return data;
  }
}

export interface IBloodConsumption {
  id?: string;
  bloodUnitId?: string;
  bloodUnit?: BloodUnit | undefined;
  amount?: number;
  doctorId?: string;
  date?: Date;
  purpose?: string | undefined;
}

export class BloodUnit implements IBloodUnit {
  id?: string;
  bloodType?: BloodType;
  amount?: number;
  bloodBankName?: string | undefined;
  consumptions?: BloodConsumption[] | undefined;

  constructor(data?: IBloodUnit) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.bloodType = _data["bloodType"];
      this.amount = _data["amount"];
      this.bloodBankName = _data["bloodBankName"];
      if (Array.isArray(_data["consumptions"])) {
        this.consumptions = [] as any;
        for (let item of _data["consumptions"])
          this.consumptions!.push(BloodConsumption.fromJS(item));
      }
    }
  }

  static fromJS(data: any): BloodUnit {
    data = typeof data === 'object' ? data : {};
    let result = new BloodUnit();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["bloodType"] = this.bloodType;
    data["amount"] = this.amount;
    data["bloodBankName"] = this.bloodBankName;
    if (Array.isArray(this.consumptions)) {
      data["consumptions"] = [];
      for (let item of this.consumptions)
        data["consumptions"].push(item.toJSON());
    }
    return data;
  }
}

export interface IBloodUnit {
  id?: string;
  bloodType?: BloodType;
  amount?: number;
  bloodBankName?: string | undefined;
  consumptions?: BloodConsumption[] | undefined;
}

export enum BloodType {
  Aneg = 0,
  Apos = 1,
  Bneg = 2,
  Bpos = 3,
  ABpos = 4,
  ABneg = 5,
  Opos = 6,
  Oneg = 7,
}

export class BloodConsumationRequest implements IBloodConsumationRequest {
  bloodType?: BloodType;
  amount?: number;
  purpose?: string | undefined;
  bloodUnitId?: string;

  constructor(data?: IBloodConsumationRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.bloodType = _data["bloodType"];
      this.amount = _data["amount"];
      this.purpose = _data["purpose"];
      this.bloodUnitId = _data["bloodUnitId"];
    }
  }

  static fromJS(data: any): BloodConsumationRequest {
    data = typeof data === 'object' ? data : {};
    let result = new BloodConsumationRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["bloodType"] = this.bloodType;
    data["amount"] = this.amount;
    data["purpose"] = this.purpose;
    data["bloodUnitId"] = this.bloodUnitId;
    return data;
  }
}

export interface IBloodConsumationRequest {
  bloodType?: BloodType;
  amount?: number;
  purpose?: string | undefined;
  bloodUnitId?: string;
}

export class BloodUnitDto implements IBloodUnitDto {
  bloodType?: BloodType;
  amount?: number;

  constructor(data?: IBloodUnitDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.bloodType = _data["bloodType"];
      this.amount = _data["amount"];
    }
  }

  static fromJS(data: any): BloodUnitDto {
    data = typeof data === 'object' ? data : {};
    let result = new BloodUnitDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["bloodType"] = this.bloodType;
    data["amount"] = this.amount;
    return data;
  }
}

export interface IBloodUnitDto {
  bloodType?: BloodType;
  amount?: number;
}

export class AvailableBloodUnitRequest implements IAvailableBloodUnitRequest {
  bloodType?: BloodType;
  amount?: number;

  constructor(data?: IAvailableBloodUnitRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.bloodType = _data["bloodType"];
      this.amount = _data["amount"];
    }
  }

  static fromJS(data: any): AvailableBloodUnitRequest {
    data = typeof data === 'object' ? data : {};
    let result = new AvailableBloodUnitRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["bloodType"] = this.bloodType;
    data["amount"] = this.amount;
    return data;
  }
}

export interface IAvailableBloodUnitRequest {
  bloodType?: BloodType;
  amount?: number;
}

export class BuildingResponse implements IBuildingResponse {
  id?: string;
  name?: string | undefined;

  constructor(data?: IBuildingResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): BuildingResponse {
    data = typeof data === 'object' ? data : {};
    let result = new BuildingResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    return data;
  }
}

export interface IBuildingResponse {
  id?: string;
  name?: string | undefined;
}

export class RoomResponse implements IRoomResponse {
  id?: string;
  name?: string | undefined;
  buildingId?: string;
  floorId?: string;
  gRoomId?: string;

  constructor(data?: IRoomResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.buildingId = _data["buildingId"];
      this.floorId = _data["floorId"];
      this.gRoomId = _data["gRoomId"];
    }
  }

  static fromJS(data: any): RoomResponse {
    data = typeof data === 'object' ? data : {};
    let result = new RoomResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["buildingId"] = this.buildingId;
    data["floorId"] = this.floorId;
    data["gRoomId"] = this.gRoomId;
    return data;
  }
}

export interface IRoomResponse {
  id?: string;
  name?: string | undefined;
  buildingId?: string;
  floorId?: string;
  gRoomId?: string;
}

export class BuildingRequest implements IBuildingRequest {
  id?: string;
  name?: string | undefined;

  constructor(data?: IBuildingRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): BuildingRequest {
    data = typeof data === 'object' ? data : {};
    let result = new BuildingRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    return data;
  }
}

export interface IBuildingRequest {
  id?: string;
  name?: string | undefined;
}

export class DoctorResponse implements IDoctorResponse {
  id?: string;
  username?: string | undefined;
  password?: string | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  email?: string | undefined;
  jmbg?: string | undefined;
  phone?: string | undefined;
  specialization?: SpecializationResponse | undefined;
  room?: RoomResponse | undefined;

  constructor(data?: IDoctorResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.username = _data["username"];
      this.password = _data["password"];
      this.name = _data["name"];
      this.surname = _data["surname"];
      this.email = _data["email"];
      this.jmbg = _data["jmbg"];
      this.phone = _data["phone"];
      this.specialization = _data["specialization"] ? SpecializationResponse.fromJS(_data["specialization"]) : <any>undefined;
      this.room = _data["room"] ? RoomResponse.fromJS(_data["room"]) : <any>undefined;
    }
  }

  static fromJS(data: any): DoctorResponse {
    data = typeof data === 'object' ? data : {};
    let result = new DoctorResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["username"] = this.username;
    data["password"] = this.password;
    data["name"] = this.name;
    data["surname"] = this.surname;
    data["email"] = this.email;
    data["jmbg"] = this.jmbg;
    data["phone"] = this.phone;
    data["specialization"] = this.specialization ? this.specialization.toJSON() : <any>undefined;
    data["room"] = this.room ? this.room.toJSON() : <any>undefined;
    return data;
  }
}

export interface IDoctorResponse {
  id?: string;
  username?: string | undefined;
  password?: string | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  email?: string | undefined;
  jmbg?: string | undefined;
  phone?: string | undefined;
  specialization?: SpecializationResponse | undefined;
  room?: RoomResponse | undefined;
}

export class SpecializationResponse implements ISpecializationResponse {
  id?: string;
  name?: string | undefined;

  constructor(data?: ISpecializationResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): SpecializationResponse {
    data = typeof data === 'object' ? data : {};
    let result = new SpecializationResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    return data;
  }
}

export interface ISpecializationResponse {
  id?: string;
  name?: string | undefined;
}

export class DoctorRequest implements IDoctorRequest {
  username?: string | undefined;
  password?: string | undefined;
  address?: AddressResponse | undefined;
  workingSchedule?: WorkingScheduleRequest | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  email?: string | undefined;
  jmbg?: string | undefined;
  phone?: string | undefined;
  specializationId?: string;
  roomId?: string;

  constructor(data?: IDoctorRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"];
      this.password = _data["password"];
      this.address = _data["address"] ? AddressResponse.fromJS(_data["address"]) : <any>undefined;
      this.workingSchedule = _data["workingSchedule"] ? WorkingScheduleRequest.fromJS(_data["workingSchedule"]) : <any>undefined;
      this.name = _data["name"];
      this.surname = _data["surname"];
      this.email = _data["email"];
      this.jmbg = _data["jmbg"];
      this.phone = _data["phone"];
      this.specializationId = _data["specializationId"];
      this.roomId = _data["roomId"];
    }
  }

  static fromJS(data: any): DoctorRequest {
    data = typeof data === 'object' ? data : {};
    let result = new DoctorRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["username"] = this.username;
    data["password"] = this.password;
    data["address"] = this.address ? this.address.toJSON() : <any>undefined;
    data["workingSchedule"] = this.workingSchedule ? this.workingSchedule.toJSON() : <any>undefined;
    data["name"] = this.name;
    data["surname"] = this.surname;
    data["email"] = this.email;
    data["jmbg"] = this.jmbg;
    data["phone"] = this.phone;
    data["specializationId"] = this.specializationId;
    data["roomId"] = this.roomId;
    return data;
  }
}

export interface IDoctorRequest {
  username?: string | undefined;
  password?: string | undefined;
  address?: AddressResponse | undefined;
  workingSchedule?: WorkingScheduleRequest | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  email?: string | undefined;
  jmbg?: string | undefined;
  phone?: string | undefined;
  specializationId?: string;
  roomId?: string;
}

export class AddressResponse implements IAddressResponse {
  id?: string;
  city?: string | undefined;
  streetNumber?: string | undefined;
  country?: string | undefined;
  street?: string | undefined;
  postcode?: number;

  constructor(data?: IAddressResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.city = _data["city"];
      this.streetNumber = _data["streetNumber"];
      this.country = _data["country"];
      this.street = _data["street"];
      this.postcode = _data["postcode"];
    }
  }

  static fromJS(data: any): AddressResponse {
    data = typeof data === 'object' ? data : {};
    let result = new AddressResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["city"] = this.city;
    data["streetNumber"] = this.streetNumber;
    data["country"] = this.country;
    data["street"] = this.street;
    data["postcode"] = this.postcode;
    return data;
  }
}

export interface IAddressResponse {
  id?: string;
  city?: string | undefined;
  streetNumber?: string | undefined;
  country?: string | undefined;
  street?: string | undefined;
  postcode?: number;
}

export class WorkingScheduleRequest implements IWorkingScheduleRequest {
  id?: string;
  startUpDate?: Date;
  expiresDate?: Date;
  startTime?: Date;
  duration?: string;

  constructor(data?: IWorkingScheduleRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.startUpDate = _data["startUpDate"] ? new Date(_data["startUpDate"].toString()) : <any>undefined;
      this.expiresDate = _data["expiresDate"] ? new Date(_data["expiresDate"].toString()) : <any>undefined;
      this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
      this.duration = _data["duration"];
    }
  }

  static fromJS(data: any): WorkingScheduleRequest {
    data = typeof data === 'object' ? data : {};
    let result = new WorkingScheduleRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["startUpDate"] = this.startUpDate ? this.startUpDate.toISOString() : <any>undefined;
    data["expiresDate"] = this.expiresDate ? this.expiresDate.toISOString() : <any>undefined;
    data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
    data["duration"] = this.duration;
    return data;
  }
}

export interface IWorkingScheduleRequest {
  id?: string;
  startUpDate?: Date;
  expiresDate?: Date;
  startTime?: Date;
  duration?: string;
}

export class FeedbackResponse implements IFeedbackResponse {
  id?: string;
  patient?: PatientResponseName | undefined;
  date?: Date;
  text?: string | undefined;
  isAnonymous?: boolean;
  isPublic?: boolean;
  status?: Status;

  constructor(data?: IFeedbackResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.patient = _data["patient"] ? PatientResponseName.fromJS(_data["patient"]) : <any>undefined;
      this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
      this.text = _data["text"];
      this.isAnonymous = _data["isAnonymous"];
      this.isPublic = _data["isPublic"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): FeedbackResponse {
    data = typeof data === 'object' ? data : {};
    let result = new FeedbackResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["patient"] = this.patient ? this.patient.toJSON() : <any>undefined;
    data["date"] = this.date ? this.date.toISOString() : <any>undefined;
    data["text"] = this.text;
    data["isAnonymous"] = this.isAnonymous;
    data["isPublic"] = this.isPublic;
    data["status"] = this.status;
    return data;
  }
}

export interface IFeedbackResponse {
  id?: string;
  patient?: PatientResponseName | undefined;
  date?: Date;
  text?: string | undefined;
  isAnonymous?: boolean;
  isPublic?: boolean;
  status?: Status;
}

export class PatientResponseName implements IPatientResponseName {
  id?: string;
  username?: string | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;

  constructor(data?: IPatientResponseName) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.username = _data["username"];
      this.name = _data["name"];
      this.surname = _data["surname"];
      this.email = _data["email"];
      this.phone = _data["phone"];
    }
  }

  static fromJS(data: any): PatientResponseName {
    data = typeof data === 'object' ? data : {};
    let result = new PatientResponseName();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["username"] = this.username;
    data["name"] = this.name;
    data["surname"] = this.surname;
    data["email"] = this.email;
    data["phone"] = this.phone;
    return data;
  }
}

export interface IPatientResponseName {
  id?: string;
  username?: string | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
}

export enum Status {
  APPROVED = 0,
  REJECTED = 1,
  PENDING = 2,
}

export class FeedbackRequest implements IFeedbackRequest {
  patientId?: string;
  date?: Date;
  text?: string | undefined;
  isAnonymous?: boolean;
  isPublic?: boolean;
  status?: Status;

  constructor(data?: IFeedbackRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.patientId = _data["patientId"];
      this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
      this.text = _data["text"];
      this.isAnonymous = _data["isAnonymous"];
      this.isPublic = _data["isPublic"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): FeedbackRequest {
    data = typeof data === 'object' ? data : {};
    let result = new FeedbackRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["patientId"] = this.patientId;
    data["date"] = this.date ? this.date.toISOString() : <any>undefined;
    data["text"] = this.text;
    data["isAnonymous"] = this.isAnonymous;
    data["isPublic"] = this.isPublic;
    data["status"] = this.status;
    return data;
  }
}

export interface IFeedbackRequest {
  patientId?: string;
  date?: Date;
  text?: string | undefined;
  isAnonymous?: boolean;
  isPublic?: boolean;
  status?: Status;
}

export class FeedbackStatusResponse implements IFeedbackStatusResponse {
  id?: string;
  patientId?: string;
  date?: Date;
  text?: string | undefined;
  isAnonymous?: boolean;
  isPublic?: boolean;
  status?: Status;

  constructor(data?: IFeedbackStatusResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.patientId = _data["patientId"];
      this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
      this.text = _data["text"];
      this.isAnonymous = _data["isAnonymous"];
      this.isPublic = _data["isPublic"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): FeedbackStatusResponse {
    data = typeof data === 'object' ? data : {};
    let result = new FeedbackStatusResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["patientId"] = this.patientId;
    data["date"] = this.date ? this.date.toISOString() : <any>undefined;
    data["text"] = this.text;
    data["isAnonymous"] = this.isAnonymous;
    data["isPublic"] = this.isPublic;
    data["status"] = this.status;
    return data;
  }
}

export interface IFeedbackStatusResponse {
  id?: string;
  patientId?: string;
  date?: Date;
  text?: string | undefined;
  isAnonymous?: boolean;
  isPublic?: boolean;
  status?: Status;
}

export class FloorResponse implements IFloorResponse {
  id?: string;
  floorNumber?: number;
  name?: string | undefined;
  buildingId?: string;

  constructor(data?: IFloorResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.floorNumber = _data["floorNumber"];
      this.name = _data["name"];
      this.buildingId = _data["buildingId"];
    }
  }

  static fromJS(data: any): FloorResponse {
    data = typeof data === 'object' ? data : {};
    let result = new FloorResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["floorNumber"] = this.floorNumber;
    data["name"] = this.name;
    data["buildingId"] = this.buildingId;
    return data;
  }
}

export interface IFloorResponse {
  id?: string;
  floorNumber?: number;
  name?: string | undefined;
  buildingId?: string;
}

export class FloorRequest implements IFloorRequest {
  id?: string;
  floorNumber?: number;
  name?: string | undefined;
  buildingId?: string;

  constructor(data?: IFloorRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.floorNumber = _data["floorNumber"];
      this.name = _data["name"];
      this.buildingId = _data["buildingId"];
    }
  }

  static fromJS(data: any): FloorRequest {
    data = typeof data === 'object' ? data : {};
    let result = new FloorRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["floorNumber"] = this.floorNumber;
    data["name"] = this.name;
    data["buildingId"] = this.buildingId;
    return data;
  }
}

export interface IFloorRequest {
  id?: string;
  floorNumber?: number;
  name?: string | undefined;
  buildingId?: string;
}

export class GRoom implements IGRoom {
  id?: string;
  positionX?: number;
  positionY?: number;
  lenght?: number;
  width?: number;
  roomId?: string;

  constructor(data?: IGRoom) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.positionX = _data["positionX"];
      this.positionY = _data["positionY"];
      this.lenght = _data["lenght"];
      this.width = _data["width"];
      this.roomId = _data["roomId"];
    }
  }

  static fromJS(data: any): GRoom {
    data = typeof data === 'object' ? data : {};
    let result = new GRoom();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["positionX"] = this.positionX;
    data["positionY"] = this.positionY;
    data["lenght"] = this.lenght;
    data["width"] = this.width;
    data["roomId"] = this.roomId;
    return data;
  }
}

export interface IGRoom {
  id?: string;
  positionX?: number;
  positionY?: number;
  lenght?: number;
  width?: number;
  roomId?: string;
}

export class PatientRequest implements IPatientRequest {
  username?: string | undefined;
  password?: string | undefined;
  address?: Address | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  email?: string | undefined;
  jmbg?: string | undefined;
  phone?: string | undefined;

  constructor(data?: IPatientRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"];
      this.password = _data["password"];
      this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
      this.name = _data["name"];
      this.surname = _data["surname"];
      this.email = _data["email"];
      this.jmbg = _data["jmbg"];
      this.phone = _data["phone"];
    }
  }

  static fromJS(data: any): PatientRequest {
    data = typeof data === 'object' ? data : {};
    let result = new PatientRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["username"] = this.username;
    data["password"] = this.password;
    data["address"] = this.address ? this.address.toJSON() : <any>undefined;
    data["name"] = this.name;
    data["surname"] = this.surname;
    data["email"] = this.email;
    data["jmbg"] = this.jmbg;
    data["phone"] = this.phone;
    return data;
  }
}

export interface IPatientRequest {
  username?: string | undefined;
  password?: string | undefined;
  address?: Address | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  email?: string | undefined;
  jmbg?: string | undefined;
  phone?: string | undefined;
}

export class RoomRequest implements IRoomRequest {
  id?: string;
  name?: string | undefined;
  buildingId?: string;
  floorId?: string;
  gRoomId?: string;

  constructor(data?: IRoomRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.buildingId = _data["buildingId"];
      this.floorId = _data["floorId"];
      this.gRoomId = _data["gRoomId"];
    }
  }

  static fromJS(data: any): RoomRequest {
    data = typeof data === 'object' ? data : {};
    let result = new RoomRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["buildingId"] = this.buildingId;
    data["floorId"] = this.floorId;
    data["gRoomId"] = this.gRoomId;
    return data;
  }
}

export interface IRoomRequest {
  id?: string;
  name?: string | undefined;
  buildingId?: string;
  floorId?: string;
  gRoomId?: string;
}

export class SpecializationRequest implements ISpecializationRequest {
  name?: string | undefined;

  constructor(data?: ISpecializationRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): SpecializationRequest {
    data = typeof data === 'object' ? data : {};
    let result = new SpecializationRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["name"] = this.name;
    return data;
  }
}

export interface ISpecializationRequest {
  name?: string | undefined;
}

export class Holiday implements IHoliday {
  id?: string;
  doctor?: Doctor | undefined;
  doctorId?: string;
  dateRange?: DateRange | undefined;
  description?: string | undefined;
  isUrgent?: boolean;
  holidayStatus?: HolidayStatus;

  constructor(data?: IHoliday) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.doctor = _data["doctor"] ? Doctor.fromJS(_data["doctor"]) : <any>undefined;
      this.doctorId = _data["doctorId"];
      this.dateRange = _data["dateRange"] ? DateRange.fromJS(_data["dateRange"]) : <any>undefined;
      this.description = _data["description"];
      this.isUrgent = _data["isUrgent"];
      this.holidayStatus = _data["holidayStatus"];
    }
  }

  static fromJS(data: any): Holiday {
    data = typeof data === 'object' ? data : {};
    let result = new Holiday();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["doctor"] = this.doctor ? this.doctor.toJSON() : <any>undefined;
    data["doctorId"] = this.doctorId;
    data["dateRange"] = this.dateRange ? this.dateRange.toJSON() : <any>undefined;
    data["description"] = this.description;
    data["isUrgent"] = this.isUrgent;
    data["holidayStatus"] = this.holidayStatus;
    return data;
  }
}

export interface IHoliday {
  id?: string;
  doctor?: Doctor | undefined;
  doctorId?: string;
  dateRange?: DateRange | undefined;
  description?: string | undefined;
  isUrgent?: boolean;
  holidayStatus?: HolidayStatus;
}

export class Doctor extends ApplicationUser implements IDoctor {
  specializationId?: string;
  specialization?: Specialization | undefined;
  appointments?: Appointment[] | undefined;
  holidays?: Holiday[] | undefined;
  room?: Room | undefined;
  roomId?: string;
  workingScheduleId?: string;
  workingSchedule?: WorkingSchedule | undefined;

  constructor(data?: IDoctor) {
    super(data);
  }

  override init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.specializationId = _data["specializationId"];
      this.specialization = _data["specialization"] ? Specialization.fromJS(_data["specialization"]) : <any>undefined;
      if (Array.isArray(_data["appointments"])) {
        this.appointments = [] as any;
        for (let item of _data["appointments"])
          this.appointments!.push(Appointment.fromJS(item));
      }
      if (Array.isArray(_data["holidays"])) {
        this.holidays = [] as any;
        for (let item of _data["holidays"])
          this.holidays!.push(Holiday.fromJS(item));
      }
      this.room = _data["room"] ? Room.fromJS(_data["room"]) : <any>undefined;
      this.roomId = _data["roomId"];
      this.workingScheduleId = _data["workingScheduleId"];
      this.workingSchedule = _data["workingSchedule"] ? WorkingSchedule.fromJS(_data["workingSchedule"]) : <any>undefined;
    }
  }

  static override fromJS(data: any): Doctor {
    data = typeof data === 'object' ? data : {};
    let result = new Doctor();
    result.init(data);
    return result;
  }

  override toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["specializationId"] = this.specializationId;
    data["specialization"] = this.specialization ? this.specialization.toJSON() : <any>undefined;
    if (Array.isArray(this.appointments)) {
      data["appointments"] = [];
      for (let item of this.appointments)
        data["appointments"].push(item.toJSON());
    }
    if (Array.isArray(this.holidays)) {
      data["holidays"] = [];
      for (let item of this.holidays)
        data["holidays"].push(item.toJSON());
    }
    data["room"] = this.room ? this.room.toJSON() : <any>undefined;
    data["roomId"] = this.roomId;
    data["workingScheduleId"] = this.workingScheduleId;
    data["workingSchedule"] = this.workingSchedule ? this.workingSchedule.toJSON() : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IDoctor extends IApplicationUser {
  specializationId?: string;
  specialization?: Specialization | undefined;
  appointments?: Appointment[] | undefined;
  holidays?: Holiday[] | undefined;
  room?: Room | undefined;
  roomId?: string;
  workingScheduleId?: string;
  workingSchedule?: WorkingSchedule | undefined;
}

export class Specialization implements ISpecialization {
  id?: string;
  name?: string | undefined;
  doctors?: Doctor[] | undefined;

  constructor(data?: ISpecialization) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      if (Array.isArray(_data["doctors"])) {
        this.doctors = [] as any;
        for (let item of _data["doctors"])
          this.doctors!.push(Doctor.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Specialization {
    data = typeof data === 'object' ? data : {};
    let result = new Specialization();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    if (Array.isArray(this.doctors)) {
      data["doctors"] = [];
      for (let item of this.doctors)
        data["doctors"].push(item.toJSON());
    }
    return data;
  }
}

export interface ISpecialization {
  id?: string;
  name?: string | undefined;
  doctors?: Doctor[] | undefined;
}

export class Appointment implements IAppointment {
  id?: string;
  emergent?: boolean;
  duration?: DateRange | undefined;
  patient?: Patient | undefined;
  patientId?: string;
  doctorId?: string;
  appointmentType?: AppointmentType;
  doctor?: Doctor | undefined;
  appointmentState?: AppointmentState;

  constructor(data?: IAppointment) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.emergent = _data["emergent"];
      this.duration = _data["duration"] ? DateRange.fromJS(_data["duration"]) : <any>undefined;
      this.patient = _data["patient"] ? Patient.fromJS(_data["patient"]) : <any>undefined;
      this.patientId = _data["patientId"];
      this.doctorId = _data["doctorId"];
      this.appointmentType = _data["appointmentType"];
      this.doctor = _data["doctor"] ? Doctor.fromJS(_data["doctor"]) : <any>undefined;
      this.appointmentState = _data["appointmentState"];
    }
  }

  static fromJS(data: any): Appointment {
    data = typeof data === 'object' ? data : {};
    let result = new Appointment();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["emergent"] = this.emergent;
    data["duration"] = this.duration ? this.duration.toJSON() : <any>undefined;
    data["patient"] = this.patient ? this.patient.toJSON() : <any>undefined;
    data["patientId"] = this.patientId;
    data["doctorId"] = this.doctorId;
    data["appointmentType"] = this.appointmentType;
    data["doctor"] = this.doctor ? this.doctor.toJSON() : <any>undefined;
    data["appointmentState"] = this.appointmentState;
    return data;
  }
}

export interface IAppointment {
  id?: string;
  emergent?: boolean;
  duration?: DateRange | undefined;
  patient?: Patient | undefined;
  patientId?: string;
  doctorId?: string;
  appointmentType?: AppointmentType;
  doctor?: Doctor | undefined;
  appointmentState?: AppointmentState;
}

export class Patient extends ApplicationUser implements IPatient {
  appointments?: Appointment[] | undefined;
  feedbacks?: Feedback[] | undefined;
  allergies?: Ingredient[] | undefined;
  patientAdmissions?: PatientAdmission[] | undefined;
  treatmentReports?: TreatmentReport[] | undefined;

  constructor(data?: IPatient) {
    super(data);
  }

  override init(_data?: any) {
    super.init(_data);
    if (_data) {
      if (Array.isArray(_data["appointments"])) {
        this.appointments = [] as any;
        for (let item of _data["appointments"])
          this.appointments!.push(Appointment.fromJS(item));
      }
      if (Array.isArray(_data["feedbacks"])) {
        this.feedbacks = [] as any;
        for (let item of _data["feedbacks"])
          this.feedbacks!.push(Feedback.fromJS(item));
      }
      if (Array.isArray(_data["allergies"])) {
        this.allergies = [] as any;
        for (let item of _data["allergies"])
          this.allergies!.push(Ingredient.fromJS(item));
      }
      if (Array.isArray(_data["patientAdmissions"])) {
        this.patientAdmissions = [] as any;
        for (let item of _data["patientAdmissions"])
          this.patientAdmissions!.push(PatientAdmission.fromJS(item));
      }
      if (Array.isArray(_data["treatmentReports"])) {
        this.treatmentReports = [] as any;
        for (let item of _data["treatmentReports"])
          this.treatmentReports!.push(TreatmentReport.fromJS(item));
      }
    }
  }

  static override fromJS(data: any): Patient {
    data = typeof data === 'object' ? data : {};
    let result = new Patient();
    result.init(data);
    return result;
  }

  override toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.appointments)) {
      data["appointments"] = [];
      for (let item of this.appointments)
        data["appointments"].push(item.toJSON());
    }
    if (Array.isArray(this.feedbacks)) {
      data["feedbacks"] = [];
      for (let item of this.feedbacks)
        data["feedbacks"].push(item.toJSON());
    }
    if (Array.isArray(this.allergies)) {
      data["allergies"] = [];
      for (let item of this.allergies)
        data["allergies"].push(item.toJSON());
    }
    if (Array.isArray(this.patientAdmissions)) {
      data["patientAdmissions"] = [];
      for (let item of this.patientAdmissions)
        data["patientAdmissions"].push(item.toJSON());
    }
    if (Array.isArray(this.treatmentReports)) {
      data["treatmentReports"] = [];
      for (let item of this.treatmentReports)
        data["treatmentReports"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}

export interface IPatient extends IApplicationUser {
  appointments?: Appointment[] | undefined;
  feedbacks?: Feedback[] | undefined;
  allergies?: Ingredient[] | undefined;
  patientAdmissions?: PatientAdmission[] | undefined;
  treatmentReports?: TreatmentReport[] | undefined;
}

export class Feedback implements IFeedback {
  id?: string;
  patientId!: string;
  patient?: Patient | undefined;
  date?: Date;
  text?: string | undefined;
  isAnonymous?: boolean;
  isPublic?: boolean;
  status?: Status;

  constructor(data?: IFeedback) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.patientId = _data["patientId"];
      this.patient = _data["patient"] ? Patient.fromJS(_data["patient"]) : <any>undefined;
      this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
      this.text = _data["text"];
      this.isAnonymous = _data["isAnonymous"];
      this.isPublic = _data["isPublic"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): Feedback {
    data = typeof data === 'object' ? data : {};
    let result = new Feedback();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["patientId"] = this.patientId;
    data["patient"] = this.patient ? this.patient.toJSON() : <any>undefined;
    data["date"] = this.date ? this.date.toISOString() : <any>undefined;
    data["text"] = this.text;
    data["isAnonymous"] = this.isAnonymous;
    data["isPublic"] = this.isPublic;
    data["status"] = this.status;
    return data;
  }
}

export interface IFeedback {
  id?: string;
  patientId: string;
  patient?: Patient | undefined;
  date?: Date;
  text?: string | undefined;
  isAnonymous?: boolean;
  isPublic?: boolean;
  status?: Status;
}

export class Ingredient implements IIngredient {
  id?: string;
  name?: string | undefined;
  medicines?: Medicine[] | undefined;
  patients?: Patient[] | undefined;

  constructor(data?: IIngredient) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      if (Array.isArray(_data["medicines"])) {
        this.medicines = [] as any;
        for (let item of _data["medicines"])
          this.medicines!.push(Medicine.fromJS(item));
      }
      if (Array.isArray(_data["patients"])) {
        this.patients = [] as any;
        for (let item of _data["patients"])
          this.patients!.push(Patient.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Ingredient {
    data = typeof data === 'object' ? data : {};
    let result = new Ingredient();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    if (Array.isArray(this.medicines)) {
      data["medicines"] = [];
      for (let item of this.medicines)
        data["medicines"].push(item.toJSON());
    }
    if (Array.isArray(this.patients)) {
      data["patients"] = [];
      for (let item of this.patients)
        data["patients"].push(item.toJSON());
    }
    return data;
  }
}

export interface IIngredient {
  id?: string;
  name?: string | undefined;
  medicines?: Medicine[] | undefined;
  patients?: Patient[] | undefined;
}

export class Medicine implements IMedicine {
  id?: string;
  name?: string | undefined;
  amount?: number;
  ingredients?: Ingredient[] | undefined;

  constructor(data?: IMedicine) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.amount = _data["amount"];
      if (Array.isArray(_data["ingredients"])) {
        this.ingredients = [] as any;
        for (let item of _data["ingredients"])
          this.ingredients!.push(Ingredient.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Medicine {
    data = typeof data === 'object' ? data : {};
    let result = new Medicine();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["amount"] = this.amount;
    if (Array.isArray(this.ingredients)) {
      data["ingredients"] = [];
      for (let item of this.ingredients)
        data["ingredients"].push(item.toJSON());
    }
    return data;
  }
}

export interface IMedicine {
  id?: string;
  name?: string | undefined;
  amount?: number;
  ingredients?: Ingredient[] | undefined;
}

export class PatientAdmission implements IPatientAdmission {
  id?: string;
  dateOfAdmission?: Date;
  patient?: Patient | undefined;
  patientId?: string;
  selectedBed?: RoomBed | undefined;
  selectedBedId?: string;
  selectedRoom?: Room | undefined;
  selectedRoomId?: string;
  reason?: string | undefined;
  dateOfDischarge?: Date;

  constructor(data?: IPatientAdmission) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.dateOfAdmission = _data["dateOfAdmission"] ? new Date(_data["dateOfAdmission"].toString()) : <any>undefined;
      this.patient = _data["patient"] ? Patient.fromJS(_data["patient"]) : <any>undefined;
      this.patientId = _data["patientId"];
      this.selectedBed = _data["selectedBed"] ? RoomBed.fromJS(_data["selectedBed"]) : <any>undefined;
      this.selectedBedId = _data["selectedBedId"];
      this.selectedRoom = _data["selectedRoom"] ? Room.fromJS(_data["selectedRoom"]) : <any>undefined;
      this.selectedRoomId = _data["selectedRoomId"];
      this.reason = _data["reason"];
      this.dateOfDischarge = _data["dateOfDischarge"] ? new Date(_data["dateOfDischarge"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): PatientAdmission {
    data = typeof data === 'object' ? data : {};
    let result = new PatientAdmission();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["dateOfAdmission"] = this.dateOfAdmission ? this.dateOfAdmission.toISOString() : <any>undefined;
    data["patient"] = this.patient ? this.patient.toJSON() : <any>undefined;
    data["patientId"] = this.patientId;
    data["selectedBed"] = this.selectedBed ? this.selectedBed.toJSON() : <any>undefined;
    data["selectedBedId"] = this.selectedBedId;
    data["selectedRoom"] = this.selectedRoom ? this.selectedRoom.toJSON() : <any>undefined;
    data["selectedRoomId"] = this.selectedRoomId;
    data["reason"] = this.reason;
    data["dateOfDischarge"] = this.dateOfDischarge ? this.dateOfDischarge.toISOString() : <any>undefined;
    return data;
  }
}

export interface IPatientAdmission {
  id?: string;
  dateOfAdmission?: Date;
  patient?: Patient | undefined;
  patientId?: string;
  selectedBed?: RoomBed | undefined;
  selectedBedId?: string;
  selectedRoom?: Room | undefined;
  selectedRoomId?: string;
  reason?: string | undefined;
  dateOfDischarge?: Date;
}

export class RoomBed implements IRoomBed {
  id?: string;
  isFree?: boolean;
  number?: string | undefined;
  room?: Room | undefined;
  roomId?: string;

  constructor(data?: IRoomBed) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.isFree = _data["isFree"];
      this.number = _data["number"];
      this.room = _data["room"] ? Room.fromJS(_data["room"]) : <any>undefined;
      this.roomId = _data["roomId"];
    }
  }

  static fromJS(data: any): RoomBed {
    data = typeof data === 'object' ? data : {};
    let result = new RoomBed();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["isFree"] = this.isFree;
    data["number"] = this.number;
    data["room"] = this.room ? this.room.toJSON() : <any>undefined;
    data["roomId"] = this.roomId;
    return data;
  }
}

export interface IRoomBed {
  id?: string;
  isFree?: boolean;
  number?: string | undefined;
  room?: Room | undefined;
  roomId?: string;
}

export class Room implements IRoom {
  id?: string;
  name?: string | undefined;
  doctor?: Doctor | undefined;
  beds?: RoomBed[] | undefined;
  floorId?: string;
  floor?: Floor | undefined;
  buildingId?: string;
  gRoomId?: string;

  constructor(data?: IRoom) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.doctor = _data["doctor"] ? Doctor.fromJS(_data["doctor"]) : <any>undefined;
      if (Array.isArray(_data["beds"])) {
        this.beds = [] as any;
        for (let item of _data["beds"])
          this.beds!.push(RoomBed.fromJS(item));
      }
      this.floorId = _data["floorId"];
      this.floor = _data["floor"] ? Floor.fromJS(_data["floor"]) : <any>undefined;
      this.buildingId = _data["buildingId"];
      this.gRoomId = _data["gRoomId"];
    }
  }

  static fromJS(data: any): Room {
    data = typeof data === 'object' ? data : {};
    let result = new Room();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["doctor"] = this.doctor ? this.doctor.toJSON() : <any>undefined;
    if (Array.isArray(this.beds)) {
      data["beds"] = [];
      for (let item of this.beds)
        data["beds"].push(item.toJSON());
    }
    data["floorId"] = this.floorId;
    data["floor"] = this.floor ? this.floor.toJSON() : <any>undefined;
    data["buildingId"] = this.buildingId;
    data["gRoomId"] = this.gRoomId;
    return data;
  }
}

export interface IRoom {
  id?: string;
  name?: string | undefined;
  doctor?: Doctor | undefined;
  beds?: RoomBed[] | undefined;
  floorId?: string;
  floor?: Floor | undefined;
  buildingId?: string;
  gRoomId?: string;
}

export class Floor implements IFloor {
  id?: string;
  floorNumber?: number;
  name?: string | undefined;
  rooms?: Room[] | undefined;
  buildingId?: string;
  building?: Building | undefined;

  constructor(data?: IFloor) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.floorNumber = _data["floorNumber"];
      this.name = _data["name"];
      if (Array.isArray(_data["rooms"])) {
        this.rooms = [] as any;
        for (let item of _data["rooms"])
          this.rooms!.push(Room.fromJS(item));
      }
      this.buildingId = _data["buildingId"];
      this.building = _data["building"] ? Building.fromJS(_data["building"]) : <any>undefined;
    }
  }

  static fromJS(data: any): Floor {
    data = typeof data === 'object' ? data : {};
    let result = new Floor();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["floorNumber"] = this.floorNumber;
    data["name"] = this.name;
    if (Array.isArray(this.rooms)) {
      data["rooms"] = [];
      for (let item of this.rooms)
        data["rooms"].push(item.toJSON());
    }
    data["buildingId"] = this.buildingId;
    data["building"] = this.building ? this.building.toJSON() : <any>undefined;
    return data;
  }
}

export interface IFloor {
  id?: string;
  floorNumber?: number;
  name?: string | undefined;
  rooms?: Room[] | undefined;
  buildingId?: string;
  building?: Building | undefined;
}

export class Building implements IBuilding {
  id?: string;
  name?: string | undefined;
  floors?: Floor[] | undefined;

  constructor(data?: IBuilding) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      if (Array.isArray(_data["floors"])) {
        this.floors = [] as any;
        for (let item of _data["floors"])
          this.floors!.push(Floor.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Building {
    data = typeof data === 'object' ? data : {};
    let result = new Building();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    if (Array.isArray(this.floors)) {
      data["floors"] = [];
      for (let item of this.floors)
        data["floors"].push(item.toJSON());
    }
    return data;
  }
}

export interface IBuilding {
  id?: string;
  name?: string | undefined;
  floors?: Floor[] | undefined;
}

export class TreatmentReport implements ITreatmentReport {
  id?: string;
  patientId?: string;
  patient?: Patient | undefined;
  dateRange?: DateRange | undefined;
  medicinePrescriptions?: MedicinePrescription[] | undefined;
  bloodPrescriptions?: BloodPrescription[] | undefined;
  reasonOfHospitalization?: string | undefined;
  reasonOfDischarge?: string | undefined;

  constructor(data?: ITreatmentReport) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.patientId = _data["patientId"];
      this.patient = _data["patient"] ? Patient.fromJS(_data["patient"]) : <any>undefined;
      this.dateRange = _data["dateRange"] ? DateRange.fromJS(_data["dateRange"]) : <any>undefined;
      if (Array.isArray(_data["medicinePrescriptions"])) {
        this.medicinePrescriptions = [] as any;
        for (let item of _data["medicinePrescriptions"])
          this.medicinePrescriptions!.push(MedicinePrescription.fromJS(item));
      }
      if (Array.isArray(_data["bloodPrescriptions"])) {
        this.bloodPrescriptions = [] as any;
        for (let item of _data["bloodPrescriptions"])
          this.bloodPrescriptions!.push(BloodPrescription.fromJS(item));
      }
      this.reasonOfHospitalization = _data["reasonOfHospitalization"];
      this.reasonOfDischarge = _data["reasonOfDischarge"];
    }
  }

  static fromJS(data: any): TreatmentReport {
    data = typeof data === 'object' ? data : {};
    let result = new TreatmentReport();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["patientId"] = this.patientId;
    data["patient"] = this.patient ? this.patient.toJSON() : <any>undefined;
    data["dateRange"] = this.dateRange ? this.dateRange.toJSON() : <any>undefined;
    if (Array.isArray(this.medicinePrescriptions)) {
      data["medicinePrescriptions"] = [];
      for (let item of this.medicinePrescriptions)
        data["medicinePrescriptions"].push(item.toJSON());
    }
    if (Array.isArray(this.bloodPrescriptions)) {
      data["bloodPrescriptions"] = [];
      for (let item of this.bloodPrescriptions)
        data["bloodPrescriptions"].push(item.toJSON());
    }
    data["reasonOfHospitalization"] = this.reasonOfHospitalization;
    data["reasonOfDischarge"] = this.reasonOfDischarge;
    return data;
  }
}

export interface ITreatmentReport {
  id?: string;
  patientId?: string;
  patient?: Patient | undefined;
  dateRange?: DateRange | undefined;
  medicinePrescriptions?: MedicinePrescription[] | undefined;
  bloodPrescriptions?: BloodPrescription[] | undefined;
  reasonOfHospitalization?: string | undefined;
  reasonOfDischarge?: string | undefined;
}

export class MedicinePrescription implements IMedicinePrescription {
  id?: string;
  medicines?: Medicine[] | undefined;
  medicineId?: string;
  patient?: Patient | undefined;
  patientId?: string;
  description?: string | undefined;
  treatmentReport?: TreatmentReport | undefined;
  treatmentReportId?: string;

  constructor(data?: IMedicinePrescription) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      if (Array.isArray(_data["medicines"])) {
        this.medicines = [] as any;
        for (let item of _data["medicines"])
          this.medicines!.push(Medicine.fromJS(item));
      }
      this.medicineId = _data["medicineId"];
      this.patient = _data["patient"] ? Patient.fromJS(_data["patient"]) : <any>undefined;
      this.patientId = _data["patientId"];
      this.description = _data["description"];
      this.treatmentReport = _data["treatmentReport"] ? TreatmentReport.fromJS(_data["treatmentReport"]) : <any>undefined;
      this.treatmentReportId = _data["treatmentReportId"];
    }
  }

  static fromJS(data: any): MedicinePrescription {
    data = typeof data === 'object' ? data : {};
    let result = new MedicinePrescription();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    if (Array.isArray(this.medicines)) {
      data["medicines"] = [];
      for (let item of this.medicines)
        data["medicines"].push(item.toJSON());
    }
    data["medicineId"] = this.medicineId;
    data["patient"] = this.patient ? this.patient.toJSON() : <any>undefined;
    data["patientId"] = this.patientId;
    data["description"] = this.description;
    data["treatmentReport"] = this.treatmentReport ? this.treatmentReport.toJSON() : <any>undefined;
    data["treatmentReportId"] = this.treatmentReportId;
    return data;
  }
}

export interface IMedicinePrescription {
  id?: string;
  medicines?: Medicine[] | undefined;
  medicineId?: string;
  patient?: Patient | undefined;
  patientId?: string;
  description?: string | undefined;
  treatmentReport?: TreatmentReport | undefined;
  treatmentReportId?: string;
}

export class BloodPrescription implements IBloodPrescription {
  id?: string;
  patient?: Patient | undefined;
  patientId?: string;
  description?: string | undefined;
  treatmentReport?: TreatmentReport | undefined;
  treatmentReportId?: string;

  constructor(data?: IBloodPrescription) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.patient = _data["patient"] ? Patient.fromJS(_data["patient"]) : <any>undefined;
      this.patientId = _data["patientId"];
      this.description = _data["description"];
      this.treatmentReport = _data["treatmentReport"] ? TreatmentReport.fromJS(_data["treatmentReport"]) : <any>undefined;
      this.treatmentReportId = _data["treatmentReportId"];
    }
  }

  static fromJS(data: any): BloodPrescription {
    data = typeof data === 'object' ? data : {};
    let result = new BloodPrescription();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["patient"] = this.patient ? this.patient.toJSON() : <any>undefined;
    data["patientId"] = this.patientId;
    data["description"] = this.description;
    data["treatmentReport"] = this.treatmentReport ? this.treatmentReport.toJSON() : <any>undefined;
    data["treatmentReportId"] = this.treatmentReportId;
    return data;
  }
}

export interface IBloodPrescription {
  id?: string;
  patient?: Patient | undefined;
  patientId?: string;
  description?: string | undefined;
  treatmentReport?: TreatmentReport | undefined;
  treatmentReportId?: string;
}

export class WorkingSchedule implements IWorkingSchedule {
  id?: string;
  expirationDate?: DateRange | undefined;
  dayOfWork?: DateRange | undefined;

  constructor(data?: IWorkingSchedule) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.expirationDate = _data["expirationDate"] ? DateRange.fromJS(_data["expirationDate"]) : <any>undefined;
      this.dayOfWork = _data["dayOfWork"] ? DateRange.fromJS(_data["dayOfWork"]) : <any>undefined;
    }
  }

  static fromJS(data: any): WorkingSchedule {
    data = typeof data === 'object' ? data : {};
    let result = new WorkingSchedule();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["expirationDate"] = this.expirationDate ? this.expirationDate.toJSON() : <any>undefined;
    data["dayOfWork"] = this.dayOfWork ? this.dayOfWork.toJSON() : <any>undefined;
    return data;
  }
}

export interface IWorkingSchedule {
  id?: string;
  expirationDate?: DateRange | undefined;
  dayOfWork?: DateRange | undefined;
}

export enum HolidayStatus {
  Pending = 0,
  Approved = 1,
  Declined = 2,
}

export class AppointmentRequest implements IAppointmentRequest {
  emergent?: boolean;
  duration?: DateRange | undefined;
  patientId?: string;
  doctorId?: string;
  appointmentType?: AppointmentType;
  appointmentState?: AppointmentState;

  constructor(data?: IAppointmentRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.emergent = _data["emergent"];
      this.duration = _data["duration"] ? DateRange.fromJS(_data["duration"]) : <any>undefined;
      this.patientId = _data["patientId"];
      this.doctorId = _data["doctorId"];
      this.appointmentType = _data["appointmentType"];
      this.appointmentState = _data["appointmentState"];
    }
  }

  static fromJS(data: any): AppointmentRequest {
    data = typeof data === 'object' ? data : {};
    let result = new AppointmentRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["emergent"] = this.emergent;
    data["duration"] = this.duration ? this.duration.toJSON() : <any>undefined;
    data["patientId"] = this.patientId;
    data["doctorId"] = this.doctorId;
    data["appointmentType"] = this.appointmentType;
    data["appointmentState"] = this.appointmentState;
    return data;
  }
}

export interface IAppointmentRequest {
  emergent?: boolean;
  duration?: DateRange | undefined;
  patientId?: string;
  doctorId?: string;
  appointmentType?: AppointmentType;
  appointmentState?: AppointmentState;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
